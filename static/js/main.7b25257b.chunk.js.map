{"version":3,"sources":["components/Marker.js","components/GameBoard.js","helpers/buildWinningSets.js","models/Game.js","components/ActivePlayer.js","components/GameOver.js","components/MessageCenter.js","components/ResetButton.js","components/Scoreboard.js","components/Title.js","components/App.js","index.js"],"names":["Marker","marker","this","props","react_default","a","createElement","alt","height","src","concat","toLowerCase","width","Component","GameBoard","key","_this","boardSpaces","get","size","dimension","className","onClick","takeTurn","style","react_transition_group","component","transitionEnterTimeout","transitionLeaveTimeout","transitionName","components_Marker","_this2","boardSpaceKeys","Array","from","keys","map","renderCell","getHorizontalWins","cells","Object","toConsumableArray","wins","length","push","splice","getVerticalWins","horizontalWins","verticalWins","_loop","i","win","winSetBuilder","arguments","undefined","diagonalWins","reduce","memo","horizontalWin","filter","cell","indexOf","reverse","getDiagonalWins","_default","config","classCallCheck","players","name","moves","reset","activePlayer","winningSets","some","set","every","position","movesIncludeFullSet","boardSpace","boardSpaceIndex","availableBoardSpaces","checkWinCondition","endGame","toggleActivePlayer","winner","gameOver","Map","buildWinningSets","assign","forEach","player","ActivePlayer","_this$props$player","GameOver","getWinMessage","getDrawMessage","MessageCenter","components_GameOver","components_ActivePlayer","getMessage","ResetButton","Scoreboard","_ref","index","Title","App","possibleConstructorReturn","getPrototypeOf","call","game","GameModel","state","getGameState","syncStateWithGame","setState","resetButton","src_components_ResetButton","resetGame","_this3","src_components_Title","src_components_MessageCenter","src_components_GameBoard","src_components_Scoreboard","conditionallyRenderResetButton","ReactDOM","render","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.7b25257b.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nclass Marker extends Component {\n\n  render() {\n    const marker = this.props.marker\n\n    return (\n      <img\n        alt={marker}\n        height=\"100%\"\n        src={`marker_${marker.toLowerCase()}.png`}\n        width=\"100%\"\n      />\n    )\n  }\n}\n\nMarker.propTypes = {\n  marker: PropTypes.string,\n}\n\nexport default Marker\n","import './GameBoard.css'\nimport Marker from './Marker'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { CSSTransitionGroup } from 'react-transition-group'\n\nclass GameBoard extends Component {\n\n  renderCell(key) {\n    const marker = this.props.boardSpaces.get(key)\n\n    // Evenly size and provide extra space between cells\n    const size = `calc(${100 / this.props.dimension}% - 2px)`\n\n    return (\n      <div\n        key={key}\n        className=\"game-cell\"\n        onClick={ () => this.props.takeTurn(key) }\n        style={{\n          width: size,\n          height: size,\n        }}\n      >\n        <CSSTransitionGroup\n          className=\"game-cell-marker\"\n          component=\"div\"\n          transitionEnterTimeout={250}\n          transitionLeaveTimeout={250}\n          transitionName=\"scale-transition\"\n        >\n          { marker ? <Marker marker={marker} /> : '' }\n        </CSSTransitionGroup>\n      </div>\n    )\n  }\n\n  render() {\n    const boardSpaceKeys = Array.from(this.props.boardSpaces.keys())\n\n    return (\n      <div className=\"game-board tile-floating\">\n        { boardSpaceKeys.map(key => this.renderCell(key)) }\n      </div>\n    )\n  }\n}\n\nGameBoard.propTypes = {\n  boardSpaces: PropTypes.object,\n  takeTurn: PropTypes.func,\n  dimension: PropTypes.number,\n}\n\nexport default GameBoard\n","function winSetBuilder(dimension=3) {\n  return [\n    ...getHorizontalWins(dimension),\n    ...getVerticalWins(dimension),\n    ...getDiagonalWins(dimension)\n  ]\n}\n\nfunction getHorizontalWins(dimension) {\n  const cells = [...Array(dimension*dimension).keys()]\n  const wins = []\n\n  while (cells.length) {\n    wins.push(cells.splice(0,dimension))\n  }\n\n  return wins\n}\n\nfunction getVerticalWins(dimension) {\n  const horizontalWins = getHorizontalWins(dimension)\n  const verticalWins = []\n\n  for (let i=0; i<dimension; i++) {\n    verticalWins.push(horizontalWins.map(win => win[i]))\n  }\n\n  return verticalWins\n}\n\nfunction getDiagonalWins(dimension) {\n  const horizontalWins = getHorizontalWins(dimension)\n  const verticalWins = getVerticalWins(dimension)\n  const diagonalWins = []\n\n  diagonalWins.push(horizontalWins.reduce((memo, horizontalWin, i) => {\n    return memo.concat(\n      horizontalWin.filter(cell => verticalWins[i].indexOf(cell) >= 0)\n    )\n  }, []))\n\n  diagonalWins.push(horizontalWins.reverse().reduce((memo, horizontalWin, i) => {\n    return memo.concat(\n      horizontalWin.filter(cell => verticalWins[i].indexOf(cell) >= 0)\n    )\n  }, []))\n\n  return diagonalWins\n}\n\nexport default winSetBuilder\n","import buildWinningSets from '../helpers/buildWinningSets'\n\nexport default class {\n  constructor(config) {\n    this.dimension = config.dimension\n    this.players = [\n      { name: 'Player 1', moves: [], marker: 'X', wins: 0 },\n      { name: 'Player 2', moves: [], marker: 'O', wins: 0 },\n    ]\n    this.reset()\n  }\n\n  checkWinCondition() {\n    const moves = this.activePlayer.moves\n    return this.winningSets.some(set => movesIncludeFullSet(moves, set))\n  }\n\n  toggleActivePlayer() {\n    this.activePlayer = this.activePlayer === this.players[0] ? this.players[1] : this.players[0]\n  }\n\n  takeTurn(boardSpace) {\n    const boardSpaceIndex = this.availableBoardSpaces.indexOf(boardSpace)\n\n    if (boardSpaceIndex >= 0) {\n      this.activePlayer.moves.push(boardSpace)\n      this.availableBoardSpaces.splice(boardSpaceIndex, 1)\n      this.boardSpaces.set(boardSpace, this.activePlayer.marker)\n\n      if (this.checkWinCondition()) {\n        this.endGame(this.activePlayer)\n      } else if(!this.availableBoardSpaces.length) {\n        this.endGame(false)\n      } else  {\n        this.toggleActivePlayer()\n      }\n\n    }\n  }\n\n  endGame(winner) {\n    this.winner = winner\n    this.gameOver = true\n    if (winner) this.winner.wins += 1\n  }\n\n  reset() {\n    const boardSpaces = generateBoardSpaces(this.dimension)\n    const availableBoardSpaces = Array.from(boardSpaces.keys())\n    const winningSets = buildWinningSets(this.dimension)\n    const activePlayer = this.players[0]\n    const gameOver = false\n    const winner = false\n\n    // Reset game properties\n    Object.assign(this, {\n      activePlayer,\n      availableBoardSpaces,\n      boardSpaces,\n      gameOver,\n      winner,\n      winningSets,\n    })\n\n    // Reset player moves\n    this.players.forEach(player => player.moves = [])\n  }\n}\n\nfunction generateBoardSpaces(dimension) {\n  return new Map([...Array(dimension*dimension).keys()].map(i => [i]))\n}\n\nfunction movesIncludeFullSet(moves, set) {\n  return set.every(position => {\n    return moves.indexOf(position) >= 0\n  })\n}\n","import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nclass ActivePlayer extends Component {\n\n  render() {\n    const { name, marker } = this.props.player\n    return (\n      <div>\n        {name}, it's your turn! Click an open space to drop an {marker} marker.\n      </div>\n    )\n  }\n}\n\nActivePlayer.propTypes = {\n  player: PropTypes.object,\n}\n\nexport default ActivePlayer\n\n","import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nclass GameOver extends Component {\n\n  getWinMessage() {\n    return `Congratulations ${this.props.winner.name}, you won! Click \"Reset Game\" to play again.`\n  }\n\n  getDrawMessage() {\n    return 'Good Game! It\\'s a draw. Click the \"Reset Game\" button to play again.'\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.winner ? this.getWinMessage() : this.getDrawMessage()}\n      </div>\n    )\n  }\n}\n\nGameOver.propTypes = {\n  winner: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.bool,\n  ]),\n}\n\nexport default GameOver\n","import './MessageCenter.css'\nimport ActivePlayer from './ActivePlayer'\nimport GameOver from './GameOver'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { CSSTransitionGroup } from 'react-transition-group'\n\nclass MessageCenter extends Component {\n\n  getMessage() {\n    if (this.props.gameOver) {\n      return <GameOver winner={this.props.winner} />\n    } else {\n      return (\n        <ActivePlayer\n          key={this.props.activePlayer.marker}\n          player={this.props.activePlayer}\n        />\n      )\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"message-center tile-floating\">\n        <CSSTransitionGroup\n          component=\"div\"\n          transitionEnterTimeout={250}\n          transitionLeaveTimeout={250}\n          transitionName=\"message-center-transition\"\n        >\n          {this.getMessage()}\n        </CSSTransitionGroup>\n      </div>\n    )\n  }\n}\n\nMessageCenter.propTypes = {\n  activePlayer: PropTypes.object,\n  gameOver: PropTypes.bool,\n  winner: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.bool,\n  ]),\n}\n\nexport default MessageCenter\n","import './ResetButton.css'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nclass ResetButton extends Component {\n\n  render() {\n    return (\n      <div className=\"reset-button tile-floating\">\n        <button className=\"pure-button\" onClick={this.props.reset}>\n          Reset Game\n        </button>\n      </div>\n    )\n  }\n}\n\nResetButton.propTypes = {\n  reset: PropTypes.func,\n}\n\nexport default ResetButton\n","import './Scoreboard.css'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nclass Scoreboard extends Component {\n\n  render() {\n    return (\n      <div className=\"scoreboard tile-floating\">\n        <h2>\n          Scoreboard\n        </h2>\n\n        <table className=\"pure-table\">\n          <thead>\n            <tr>\n              <th>Player</th>\n              <th>Marker</th>\n              <th>Wins</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {this.props.players.map(({ name, marker, wins }, index) => {\n              return (\n                <tr key={index}>\n                  <td>{name}</td>\n                  <td>{marker}</td>\n                  <td>{wins}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nScoreboard.propTypes = {\n  players: PropTypes.array,\n}\n\nexport default Scoreboard\n","import './Title.css'\nimport React, { Component } from 'react'\n\nclass Title extends Component {\n  render() {\n    return (\n      <header className=\"title tile-floating\">\n        <h1>Tic-React-Toe</h1>\n      </header>\n    )\n  }\n}\n\nexport default Title\n","import './App.css'\nimport GameBoard from './GameBoard'\nimport GameModel from '../models/Game'\nimport MessageCenter from './MessageCenter'\nimport React, { Component } from 'react'\nimport ResetButton from './ResetButton'\nimport Scoreboard from './Scoreboard'\nimport Title from './Title'\nimport { CSSTransitionGroup } from 'react-transition-group'\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.game = new GameModel({ dimension: 3 })\n    this.state = this.getGameState()\n  }\n\n  takeTurn(boardSpace) {\n    if (!this.game.gameOver) {\n      this.game.takeTurn(boardSpace)\n      this.syncStateWithGame()\n    }\n  }\n\n  resetGame() {\n    this.game.reset()\n    this.syncStateWithGame()\n  }\n\n  getGameState() {\n    return {\n      activePlayer: this.game.activePlayer,\n      boardSpaces: this.game.boardSpaces,\n      gameOver: this.game.gameOver,\n      players: this.game.players,\n      winner: this.game.winner,\n    }\n  }\n\n  syncStateWithGame() {\n    this.setState(this.getGameState())\n  }\n\n  conditionallyRenderResetButton() {\n    const resetButton = <ResetButton reset={() => this.resetGame()} />\n    return this.state.gameOver ? resetButton: ''\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-column\">\n          <Title />\n\n          <MessageCenter\n            activePlayer={this.state.activePlayer}\n            gameOver={this.state.gameOver}\n            winner={this.state.winner}\n          />\n\n          <GameBoard\n            boardSpaces={this.state.boardSpaces}\n            dimension={this.game.dimension}\n            takeTurn={boardSpace => this.takeTurn(boardSpace)}\n          />\n        </div>\n\n        <div className=\"app-column\">\n          <Scoreboard players={this.state.players} />\n\n          <CSSTransitionGroup\n            component=\"div\"\n            transitionEnterTimeout={250}\n            transitionLeaveTimeout={250}\n            transitionName=\"scale-transition\"\n          >\n            {this.conditionallyRenderResetButton()}\n          </CSSTransitionGroup>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import './index.css';\nimport 'purecss/build/buttons.css'\nimport 'purecss/build/tables.css'\nimport App from './components/App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}